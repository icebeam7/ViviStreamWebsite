@using Microsoft.AspNetCore.Identity
@using ViviStreamWebsite.Models

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@if (SignInManager.IsSignedIn(User))
{
    <form asp-area="" asp-controller="Account" asp-action="Logout" method="post" id="logoutForm" class="navbar-right">
        <ul class="nav navbar-nav navbar-right">
            <li>
                <a asp-area="" asp-controller="MyPlaylist" asp-action="Index">Hello @UserManager.GetUserName(User)!</a>
            </li>
            <li><a asp-area="" asp-controller="MyPlaylist" asp-action="Index">My Playlist</a></li>
            @if (User.IsInRole("Moderator"))
            {
                <li><a asp-area="" asp-controller="BotTimers" asp-action="Index">Timers</a></li>
                <li><a asp-area="" asp-controller="Tags" asp-action="Index">Stream Tags</a></li>
            }
            <li>
                <button type="submit" class="btn btn-link navbar-btn navbar-link">Log out</button>
            </li>
        </ul>
    </form>
}
else
{
    <ul class="nav navbar-nav navbar-right">
        <li>
            @{
                var loginProviders = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToList();
                <form asp-action="../Account/ExternalLogin" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal">
                    @foreach (var provider in loginProviders)
                    {
                        <button type="submit" class="btn btn-link navbar-btn navbar-link" name="provider" value="@provider.Name" title="Log in with @provider.Name">Log in with @provider.Name</button>
                    }
                </form>
            }
        </li>
    </ul>
}
